{"version":3,"sources":["components/SeasonDisplay.js","components/Spinner.js","index.js"],"names":["seasonConfig","Summer","text","iconName","Winter","SeasonDisplay","props","lat","month","season","Date","getMonth","console","log","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","class","defaultProps","App","state","errorMsg","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","error","message","components_SeasonDisplay","components_Spinner","renderContent","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAMMA,SAAe,CACnBC,OAAQ,CACNC,KAAM,sBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,uBACNC,SAAU,eAiCCE,EApBO,SAAAC,GACpB,IAViBC,EAAKC,EAUhBC,GAVWF,EAUQD,EAAMC,IAVTC,GAUc,IAAIE,MAAOC,WAT/CC,QAAQC,MACJL,EAAQ,GAAKA,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIDO,EAEFd,EAAaS,GAAhCP,EAFqBY,EAErBZ,KAAMC,EAFeW,EAEfX,SASd,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBV,IAChCM,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAuBhB,EAAvB,WACZY,EAAAC,EAAAC,cAAA,UAAKf,GACLa,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBhB,EAAxB,aCvCZiB,EAAU,SAAAd,GACd,OACES,EAAAC,EAAAC,cAAA,OAAKI,MAAM,oBACTN,EAAAC,EAAAC,cAAA,OAAKI,MAAM,kBAAkBf,EAAMJ,QAMzCkB,EAAQE,aAAe,CACrBpB,KAAM,cAEOkB,QCTTG,6MAWJC,MAAQ,CAAEjB,IAAK,KAAMkB,SAAU,uFAEX,IAAAC,EAAAC,KAClBf,QAAQC,IAAI,2CACZe,OAAOC,UAAUC,YAAYC,mBAC3B,SAAAC,GACEN,EAAKO,SAAS,CAAE1B,IAAKyB,EAASE,OAAOC,YAGvC,SAAAC,GACEV,EAAKO,SAAS,CAAER,SAAUW,EAAMC,yDAMpCzB,QAAQC,IAAI,uFAIZ,OAAIc,KAAKH,MAAMC,WAAaE,KAAKH,MAAMjB,IAC9BQ,EAAAC,EAAAC,cAAA,qBAAaU,KAAKH,MAAMC,WACrBE,KAAKH,MAAMC,UAAYE,KAAKH,MAAMjB,IACrCQ,EAAAC,EAAAC,cAACqB,EAAD,CAAe/B,IAAKoB,KAAKH,MAAMjB,MAM/BQ,EAAAC,EAAAC,cAACsB,EAAD,CAASrC,KAAK,uEAKvB,OAAOa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeS,KAAKa,wBA7C5BC,aAiDlBC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,cAAc","file":"static/js/main.be3beb32.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./seasonDisplay.css\";\n/* this doesn't mean that we simply import everything from css file into this js file!\nWebpack works for me behind the scene grab everything in the css and put it into index.html\n*/\n\nconst seasonConfig = {\n  Summer: {\n    text: \"Lets hit the beach!\",\n    iconName: \"sun\"\n  },\n  Winter: {\n    text: \"Burr, it is chilly~~\",\n    iconName: \"snowflake\"\n  }\n};\n\nconst getSeason = (lat, month) => {\n  console.log();\n  if (month > 2 && month < 9) {\n    return lat > 0 ? \"Summer\" : \"Winter\"; // if its north hemisphere then summer else winter\n  } else {\n    return lat > 0 ? \"Winter\" : \"Summer\";\n  }\n};\n\nconst SeasonDisplay = props => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { text, iconName } = seasonConfig[season]; // nice way to make both seasonConfig and getSeason dynamic, try destructor always when possible\n  //console.log(season);\n  // const seasonTxt =\n  //   season === \"Winter\" ? text : seasonConfig.summer.text;\n  // const icon =\n  //   season === \"Winter\"\n  //     ? seasonConfig.winter.iconName\n  //     : seasonConfig.summer.iconName;\n\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`icon-left massive ${iconName} icon`} />\n      <h1>{text}</h1>\n      <i className={`icon-right massive ${iconName} icon`} />\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from \"react\";\n\nconst Spinner = props => {\n  return (\n    <div class=\"ui active dimmer\">\n      <div class=\"ui text loader\">{props.text}</div>\n    </div>\n  );\n};\n\n// exactly same as || loading above\nSpinner.defaultProps = {\n  text: \"Loading...\"\n};\nexport default Spinner;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./components/SeasonDisplay\";\nimport Spinner from \"./components/Spinner\";\n\nclass App extends Component {\n  // constructor(props) {\n  //   super(props);\n\n  //   this.state = {\n  //     lat: null,\n  //     errorMsg: \"\"\n  //   }; // initialize state\n  // }\n\n  // alternative state initialization\n  state = { lat: null, errorMsg: \"\" }; // exactly same as using constructor above\n\n  componentDidMount() {\n    console.log(\"My component was rendered to the screen\");\n    window.navigator.geolocation.getCurrentPosition(\n      position => {\n        this.setState({ lat: position.coords.latitude });\n        // never do !  this.state.lat = position.coords.latitude !!! never do this unless you initialize it\n      },\n      error => {\n        this.setState({ errorMsg: error.message });\n      }\n    );\n  }\n\n  componentDidUpdate() {\n    console.log(\"My component was just updated - rerendered!\");\n  }\n\n  renderContent() {\n    if (this.state.errorMsg && !this.state.lat) {\n      return <div>Error: {this.state.errorMsg}</div>;\n    } else if (!this.state.errorMsg && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n      {\n        /* when you receive latitude, render gets called, and then SeasonDisplay gets called, lat props will \n      be passed */\n      }\n    } else {\n      return <Spinner text=\"Please accept location request...\" />;\n    }\n  }\n\n  render() {\n    return <div className=\"bordrer red\">{this.renderContent()}</div>;\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}